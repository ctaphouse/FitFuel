@page "/items/{ItemId:int}/adjusteditems"
@using FitFuel.Shared.Dtos
@using FitFuel.Client.Services
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ItemService ItemService
@inject AdjustedItemService AdjustedItemService

<PageTitle>Adjusted Item Measurements</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-900">
                @if (_item != null)
                {
                    <span>Measurements for @_item.Name</span>
                }
                else
                {
                    <span>Item Measurements</span>
                }
            </h1>
            <div class="flex space-x-2">
                <button @onclick="AddNewMeasurement" 
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Add Measurement
                </button>
                <a href="/items" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Back to Items
                </a>
            </div>
        </div>
        
        @if (_loading)
        {
            <div class="flex justify-center items-center p-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (_item == null)
        {
            <div class="bg-red-50 border-l-4 border-red-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700">
                            Item not found.
                        </p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="bg-white shadow rounded-lg overflow-hidden mb-6">
                <div class="p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Item Details</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Name</span>
                            <span class="block mt-1 text-gray-900">@_item.Name</span>
                        </div>
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Type</span>
                            <span class="block mt-1 text-gray-900">@_item.ItemTypeName</span>
                        </div>
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Calories</span>
                            <span class="block mt-1 text-gray-900">@_item.Calories per 100g</span>
                        </div>
                    </div>
                    <div class="mt-4 grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Protein</span>
                            <span class="block mt-1 text-gray-900">@_item.Protein g per 100g</span>
                        </div>
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Carbohydrates</span>
                            <span class="block mt-1 text-gray-900">@_item.Carbohydrates g per 100g</span>
                        </div>
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Fat</span>
                            <span class="block mt-1 text-gray-900">@_item.Fat g per 100g</span>
                        </div>
                        <div>
                            <span class="block text-sm font-medium text-gray-500">Fiber</span>
                            <span class="block mt-1 text-gray-900">@_item.Fiber g per 100g</span>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (_isAdding || _isEditing)
            {
                <div class="bg-white shadow rounded-lg overflow-hidden mb-6">
                    <div class="p-6">
                        <h2 class="text-lg font-medium text-gray-900 mb-4">
                            @(_isAdding ? "Add New Measurement" : "Edit Measurement")
                        </h2>
                        <EditForm Model="@_adjustedItem" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="mb-4 text-red-600 text-sm" />
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="measurement" class="block text-sm font-medium text-gray-700">Measurement Name</label>
                                    <div class="mt-1">
                                        <InputText id="measurement" @bind-Value="_adjustedItem.Measurement" 
                                                 placeholder="e.g., Cup, Tablespoon, Piece"
                                                 class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                        <ValidationMessage For="@(() => _adjustedItem.Measurement)" class="mt-1 text-sm text-red-600" />
                                    </div>
                                </div>
                                
                                <div>
                                    <label for="gramEquivalent" class="block text-sm font-medium text-gray-700">Gram Equivalent</label>
                                    <div class="mt-1">
                                        <InputNumber id="gramEquivalent" @bind-Value="_adjustedItem.GramEquivalent" step="0.1"
                                                  placeholder="Weight in grams"
                                                  class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                        <ValidationMessage For="@(() => _adjustedItem.GramEquivalent)" class="mt-1 text-sm text-red-600" />
                                        <span class="text-xs text-gray-500 mt-1 block">Enter the weight in grams for this measurement unit</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-5 flex justify-end space-x-3">
                                <button type="button" @onclick="CancelEdit"
                                        class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Cancel
                                </button>
                                <button type="submit" 
                                        class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    @(_isAdding ? "Add" : "Update")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
            
            <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Measurements</h2>
                    
                    @if (_adjustedItems == null || !_adjustedItems.Any())
                    {
                        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded" role="alert">
                            <p>No adjusted measurements found for this item. Click the "Add Measurement" button to create one.</p>
                        </div>
                    }
                    else
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Measurement</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gram Equivalent</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Calories</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Protein</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @foreach (var adjustedItem in _adjustedItems)
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@adjustedItem.Measurement</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@adjustedItem.GramEquivalent g</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                @(Math.Round(_item.Calories * (decimal)adjustedItem.GramEquivalent / 100))
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                @(Math.Round(_item.Protein * adjustedItem.GramEquivalent / 100, 1)) g
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <div class="flex space-x-2">
                                                    <button class="inline-flex items-center px-3 py-1 border border-blue-600 text-blue-600 bg-white hover:bg-blue-600 hover:text-white rounded text-sm transition-colors" @onclick="() => EditMeasurement(adjustedItem)">
                                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                        </svg>
                                                        Edit
                                                    </button>
                                                    <button class="inline-flex items-center px-3 py-1 border border-red-600 text-red-600 bg-white hover:bg-red-600 hover:text-white rounded text-sm transition-colors" @onclick="() => ConfirmDeleteMeasurement(adjustedItem)">
                                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                        Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int ItemId { get; set; }
    
    private ItemDto? _item;
    private List<AdjustedItemDto>? _adjustedItems;
    private bool _loading = true;
    private bool _isAdding = false;
    private bool _isEditing = false;
    private int _editingId = 0;
    
    // Form model for adding/editing adjusted items
    private AdjustedItemCreateDto _adjustedItem = new AdjustedItemCreateDto();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        _loading = true;
        try
        {
            // Load item details
            _item = await ItemService.GetItemAsync(ItemId);
            
            if (_item != null)
            {
                // Load adjusted items for this item
                _adjustedItems = await AdjustedItemService.GetAdjustedItemsByItemIdAsync(ItemId);
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load data: {ex.Message}");
        }
        _loading = false;
    }
    
    private void AddNewMeasurement()
    {
        _adjustedItem = new AdjustedItemCreateDto { ItemId = ItemId };
        _isAdding = true;
        _isEditing = false;
        _editingId = 0;
    }
    
    private void EditMeasurement(AdjustedItemDto adjustedItem)
    {
        _adjustedItem = new AdjustedItemCreateDto
        {
            ItemId = ItemId,
            Measurement = adjustedItem.Measurement,
            GramEquivalent = adjustedItem.GramEquivalent
        };
        _isAdding = false;
        _isEditing = true;
        _editingId = adjustedItem.Id;
    }
    
    private void CancelEdit()
    {
        _isAdding = false;
        _isEditing = false;
        _editingId = 0;
        _adjustedItem = new AdjustedItemCreateDto { ItemId = ItemId };
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            bool success;
            
            if (_isAdding)
            {
                // Creating a new adjusted item
                success = await AdjustedItemService.CreateAdjustedItemAsync(_adjustedItem);
                
                if (success)
                {
                    await DialogService.ShowMessageBox("Success", "Measurement added successfully.");
                    _isAdding = false;
                }
                else
                {
                    await DialogService.ShowMessageBox("Error", "Failed to add measurement. It may already exist.");
                }
            }
            else if (_isEditing)
            {
                // Updating an existing adjusted item
                var updateDto = new AdjustedItemUpdateDto
                {
                    Measurement = _adjustedItem.Measurement,
                    GramEquivalent = _adjustedItem.GramEquivalent
                };
                
                success = await AdjustedItemService.UpdateAdjustedItemAsync(_editingId, updateDto);
                
                if (success)
                {
                    await DialogService.ShowMessageBox("Success", "Measurement updated successfully.");
                    _isEditing = false;
                    _editingId = 0;
                }
                else
                {
                    await DialogService.ShowMessageBox("Error", "Failed to update measurement. It may already exist.");
                }
            }
            
            // Reload data after add/update
            await LoadData();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error processing measurement: {ex.Message}");
        }
    }
    
    private async Task ConfirmDeleteMeasurement(AdjustedItemDto adjustedItem)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete the '{adjustedItem.Measurement}' measurement?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteMeasurement(adjustedItem.Id);
        }
    }
    
    private async Task DeleteMeasurement(int id)
    {
        try
        {
            var success = await AdjustedItemService.DeleteAdjustedItemAsync(id);
            
            if (success)
            {
                await DialogService.ShowMessageBox("Success", "Measurement deleted successfully.");
                await LoadData();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "Failed to delete measurement.");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error deleting measurement: {ex.Message}");
        }
    }
}