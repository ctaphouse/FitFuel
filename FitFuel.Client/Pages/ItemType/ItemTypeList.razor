@page "/itemtypes"
@using FitFuel.Shared.Dtos
@using FitFuel.Client.Services
@inject ItemTypeService ItemTypeService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Item Types</PageTitle>

<div class="container mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Item Types</h1>
    
    <div class="mb-6">
        <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded flex items-center" @onclick="CreateNew">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add New Item Type
        </button>
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (_itemTypes == null || !_itemTypes.Any())
    {
        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded" role="alert">
            <p>No item types found. Click the button above to add one.</p>
        </div>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var itemType in _itemTypes)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@itemType.Name</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex space-x-2">
                                    <button class="inline-flex items-center px-3 py-1 border border-blue-600 text-blue-600 bg-white hover:bg-blue-600 hover:text-white rounded text-sm transition-colors" @onclick="() => Edit(itemType.Id)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Edit
                                    </button>
                                    <button class="inline-flex items-center px-3 py-1 border border-red-600 text-red-600 bg-white hover:bg-red-600 hover:text-white rounded text-sm transition-colors" @onclick="() => ConfirmDelete(itemType)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<ItemTypeDto>? _itemTypes;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemTypes();
    }

    private async Task LoadItemTypes()
    {
        _loading = true;
        try
        {
            _itemTypes = await ItemTypeService.GetItemTypesAsync();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load item types: {ex.Message}");
        }
        _loading = false;
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("/itemtypes/create");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/itemtypes/edit/{id}");
    }

    private async Task ConfirmDelete(ItemTypeDto itemType)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{itemType.Name}'?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteItemType(itemType.Id);
        }
    }

    private async Task DeleteItemType(int id)
    {
        try
        {
            var success = await ItemTypeService.DeleteItemTypeAsync(id);
            if (success)
            {
                await DialogService.ShowMessageBox("Success", "Item type deleted successfully.");
                await LoadItemTypes();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "Failed to delete item type. It may be in use by other items.");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error deleting item type: {ex.Message}");
        }
    }
}