@page "/items/edit/{Id:int}"
@using FitFuel.Shared.Dtos
@using FitFuel.Client.Services
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Edit Item</PageTitle>

<div class="min-h-screen bg-gray-100 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-indigo-800">Edit Item</h1>
            <a href="/items" 
               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-700 hover:bg-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Back to List
            </a>
        </div>
        
        <div class="bg-white shadow-lg rounded-lg overflow-hidden border border-gray-200">
            <div class="p-6">
                @if (_loading)
                {
                    <div class="flex justify-center items-center p-12">
                        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                else if (_item == null)
                {
                    <div class="bg-red-50 border-l-4 border-red-400 p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm text-red-700">
                                    Item not found.
                                </p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="@_updateItem" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-4 text-red-600 text-sm" />
                        
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-4">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <p class="text-sm text-red-700">@_errorMessage</p>
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="space-y-6 bg-slate-200 p-6 rounded-md">
                            <div class="max-w-md">
                                <label for="name" class="block text-sm font-medium text-gray-800">Name</label>
                                <div class="mt-1">
                                    <InputText id="name" @bind-Value="_updateItem.Name" maxlength="50"
                                             class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900" />
                                    <ValidationMessage For="@(() => _updateItem.Name)" class="mt-1 text-sm text-red-600" />
                                </div>
                            </div>
                            
                            @{
                                var itemTypeClass = "shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900";
                                if (IsItemTypeInvalid())
                                {
                                    itemTypeClass += " border-red-500";
                                }
                            }
                            
                            <div class="max-w-xs">
                                <label for="itemTypeId" class="block text-sm font-medium text-gray-800">Item Type</label>
                                <div class="mt-1">
                                    <InputSelect id="itemTypeId" @bind-Value="_updateItem.ItemTypeId" class="@itemTypeClass">
                                        <option value="0">Select Item Type</option>
                                        @if (_itemTypes != null)
                                        {
                                            @foreach (var itemType in _itemTypes)
                                            {
                                                <option value="@itemType.Id">@itemType.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => _updateItem.ItemTypeId)" class="mt-1 text-sm text-red-600" />
                                    @if (IsItemTypeInvalid())
                                    {
                                        <div class="mt-1 text-sm text-red-600">Please select an item type</div>
                                    }
                                </div>
                            </div>
                            
                            <div class="bg-slate-300 p-4 rounded-md border border-gray-200 bg-green-50">
                                <h3 class="text-lg font-medium text-indigo-700 mb-4">Nutritional Information (per 100g)</h3>
                                <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
                                    <div class="max-w-xs">
                                        <label for="calories" class="block text-sm font-medium text-gray-800">Calories</label>
                                        <div class="mt-1 relative">
                                            <InputNumber id="calories" @bind-Value="_updateItem.Calories" 
                                                      min="0" max="9999999" 
                                                      class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Calories)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Integer (max 9,999,999)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="max-w-xs">
                                        <label for="protein" class="block text-sm font-medium text-gray-800">Protein (g)</label>
                                        <div class="mt-1 relative">
                                            <input type="number" id="protein" value="@_formattedProtein"
                                                   @onchange="@(e => OnProteinChanged(e.Value?.ToString()))"
                                                   @onblur="@(e => FormatProtein())"
                                                   min="0" max="99999999.99" step="0.01"
                                                   class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Protein)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Decimal(10,2)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="max-w-xs">
                                        <label for="carbohydrates" class="block text-sm font-medium text-gray-800">Carbs (g)</label>
                                        <div class="mt-1 relative">
                                            <input type="number" id="carbohydrates" value="@_formattedCarbs"
                                                   @onchange="@(e => OnCarbsChanged(e.Value?.ToString()))"
                                                   @onblur="@(e => FormatCarbs())"
                                                   min="0" max="99999999.99" step="0.01"
                                                   class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Carbohydrates)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Decimal(10,2)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="max-w-xs">
                                        <label for="fat" class="block text-sm font-medium text-gray-800">Fat (g)</label>
                                        <div class="mt-1 relative">
                                            <input type="number" id="fat" value="@_formattedFat"
                                                   @onchange="@(e => OnFatChanged(e.Value?.ToString()))"
                                                   @onblur="@(e => FormatFat())"
                                                   min="0" max="99999999.99" step="0.01"
                                                   class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Fat)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Decimal(10,2)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="max-w-xs">
                                        <label for="fiber" class="block text-sm font-medium text-gray-800">Fiber (g)</label>
                                        <div class="mt-1 relative">
                                            <input type="number" id="fiber" value="@_formattedFiber"
                                                   @onchange="@(e => OnFiberChanged(e.Value?.ToString()))"
                                                   @onblur="@(e => FormatFiber())"
                                                   min="0" max="99999999.99" step="0.01"
                                                   class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Fiber)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Decimal(10,2)</div>
                                        </div>
                                    </div>
                                    
                                    <div class="max-w-xs">
                                        <label for="sugars" class="block text-sm font-medium text-gray-800">Sugars (g)</label>
                                        <div class="mt-1 relative">
                                            <input type="number" id="sugars" value="@_formattedSugars"
                                                   @onchange="@(e => OnSugarsChanged(e.Value?.ToString()))"
                                                   @onblur="@(e => FormatSugars())"
                                                   min="0" max="99999999.99" step="0.01"
                                                   class="shadow-sm focus:ring-indigo-600 focus:border-indigo-600 block w-full sm:text-sm border-gray-300 rounded-md bg-white text-gray-900 text-right" />
                                            <ValidationMessage For="@(() => _updateItem.Sugars)" class="mt-1 text-sm text-red-600" />
                                            <div class="text-xs text-gray-500 mt-1">Decimal(10,2)</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="pt-5 flex justify-end space-x-3">
                                <button type="button" @onclick="Cancel"
                                        class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Cancel
                                </button>
                                <button type="submit" 
                                        class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                    Save
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private ItemDto? _item;
    private ItemUpdateDto _updateItem = new ItemUpdateDto();
    private List<ItemTypeDto>? _itemTypes;
    private bool _loading = true;
    private bool _formSubmitted = false;
    private string _errorMessage = string.Empty;
    
    // Formatted display values for decimal fields
    private string _formattedProtein = "0.00";
    private string _formattedCarbs = "0.00";
    private string _formattedFat = "0.00";
    private string _formattedFiber = "0.00";
    private string _formattedSugars = "0.00";
    
    [Inject]
    private ItemService ItemService { get; set; } = default!;
    
    [Inject]
    private ItemTypeService ItemTypeService { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadItemTypes();
        await LoadItem();
    }
    
    private async Task LoadItemTypes()
    {
        try
        {
            _itemTypes = await ItemTypeService.GetItemTypesAsync();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load item types: {ex.Message}");
        }
    }
    
    private async Task LoadItem()
    {
        _loading = true;
        try
        {
            _item = await ItemService.GetItemAsync(Id);
            if (_item != null)
            {
                // Map ItemDto to ItemUpdateDto
                _updateItem.Name = _item.Name;
                _updateItem.Calories = _item.Calories;
                _updateItem.Protein = _item.Protein;
                _updateItem.Carbohydrates = _item.Carbohydrates;
                _updateItem.Fiber = _item.Fiber;
                _updateItem.Sugars = _item.Sugars;
                _updateItem.Fat = _item.Fat;
                _updateItem.ItemTypeId = _item.ItemTypeId;
                
                // Format initial values
                FormatAllDecimalFields();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", $"Item with ID {Id} not found.");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load item: {ex.Message}");
        }
        _loading = false;
    }
    
    private bool IsItemTypeInvalid()
    {
        return _updateItem.ItemTypeId <= 0 && _formSubmitted;
    }
    
    // Formatting handlers for each field
    private void FormatProtein() 
    {
        _formattedProtein = _updateItem.Protein.ToString("F2", CultureInfo.InvariantCulture);
        StateHasChanged();
    }
    
    private void FormatCarbs() 
    {
        _formattedCarbs = _updateItem.Carbohydrates.ToString("F2", CultureInfo.InvariantCulture);
        StateHasChanged();
    }
    
    private void FormatFat() 
    {
        _formattedFat = _updateItem.Fat.ToString("F2", CultureInfo.InvariantCulture);
        StateHasChanged();
    }
    
    private void FormatFiber() 
    {
        _formattedFiber = _updateItem.Fiber.ToString("F2", CultureInfo.InvariantCulture);
        StateHasChanged();
    }
    
    private void FormatSugars() 
    {
        _formattedSugars = _updateItem.Sugars.ToString("F2", CultureInfo.InvariantCulture);
        StateHasChanged();
    }
    
    private void FormatAllDecimalFields()
    {
        FormatProtein();
        FormatCarbs();
        FormatFat();
        FormatFiber();
        FormatSugars();
    }
    
    // Value change handlers for each field
    private void OnProteinChanged(string? value)
    {
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            _updateItem.Protein = result;
        }
    }
    
    private void OnCarbsChanged(string? value)
    {
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            _updateItem.Carbohydrates = result;
        }
    }
    
    private void OnFatChanged(string? value)
    {
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            _updateItem.Fat = result;
        }
    }
    
    private void OnFiberChanged(string? value)
    {
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            _updateItem.Fiber = result;
        }
    }
    
    private void OnSugarsChanged(string? value)
    {
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            _updateItem.Sugars = result;
        }
    }
    
    private async Task HandleValidSubmit()
    {
        _formSubmitted = true;
        _errorMessage = string.Empty;
        
        // Additional custom validation
        if (_updateItem.ItemTypeId <= 0)
        {
            return; // Don't proceed if item type is invalid
        }
        
        try
        {
            // Check additional validations for decimal(10,2) constraints
            if (!ValidateDecimalPrecision())
            {
                await DialogService.ShowMessageBox("Validation Error", 
                    "One or more numeric values exceed the allowed precision (decimal(10,2)).\nMaximum 8 digits before decimal and 2 digits after.");
                return;
            }
            
            var result = await ItemService.UpdateItemAsync(Id, _updateItem);
            if (result.success)
            {
                await DialogService.ShowMessageBox("Success", "Item updated successfully.");
                NavigationManager.NavigateTo("/items");
            }
            else
            {
                // Display the error message from the API response
                _errorMessage = result.message ?? "Failed to update item. Please check that the name is unique.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error updating item: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private bool ValidateDecimalPrecision()
    {
        // For decimal(10,2), we can have at most 8 digits before the decimal point
        // and exactly 2 digits after the decimal point
        bool isValid = true;
        
        // Check Calories (int, so just check max value)
        if (_updateItem.Calories > 99999999)
        {
            isValid = false;
        }
        
        // Check decimal fields
        foreach (var value in new[] { 
            _updateItem.Protein, _updateItem.Carbohydrates, _updateItem.Fiber, _updateItem.Sugars, _updateItem.Fat 
        })
        {
            // Convert to string and analyze parts
            var valueStr = value.ToString(CultureInfo.InvariantCulture);
            var parts = valueStr.Split('.');
            
            // Check integer part (before decimal)
            if (parts[0].Length > 8)
            {
                isValid = false;
                break;
            }
            
            // Check decimal part if it exists
            if (parts.Length > 1 && parts[1].Length > 2)
            {
                isValid = false;
                break;
            }
        }
        
        return isValid;
    }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo("/items");
    }
}