@page "/items"
@using FitFuel.Shared.Dtos
@using FitFuel.Client.Services
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Items</PageTitle>

<div class="container mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Items</h1>
    
    <div class="mb-6 flex justify-between items-center">
        <div>
            <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded flex items-center" @onclick="CreateNew">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add New Item
            </button>
        </div>
        <div class="flex items-center space-x-4">
            <div>
                <input type="text" placeholder="Search items..." class="px-4 py-2 border rounded-md" 
                       @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            </div>
            <div>
                <select class="px-4 py-2 border rounded-md" @bind="selectedItemTypeId" @bind:after="FilterByItemType">
                    <option value="0">All Item Types</option>
                    @if (itemTypes != null)
                    {
                        @foreach (var itemType in itemTypes)
                        {
                            <option value="@itemType.Id">@itemType.Name</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (_items == null || !_items.Any())
    {
        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded" role="alert">
            <p>No items found. Click the button above to add one.</p>
        </div>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Calories</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Protein</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Carbs</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fat</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var item in _items)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@item.Name</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@item.ItemTypeName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@item.Calories</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@item.Protein g</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@item.Carbohydrates g</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@item.Fat g</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex space-x-2">
                                    <button class="inline-flex items-center px-3 py-1 border border-blue-600 text-blue-600 bg-white hover:bg-blue-600 hover:text-white rounded text-sm transition-colors" @onclick="() => Edit(item.Id)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Edit
                                    </button>
                                    <button class="inline-flex items-center px-3 py-1 border border-red-600 text-red-600 bg-white hover:bg-red-600 hover:text-white rounded text-sm transition-colors" @onclick="() => ConfirmDelete(item)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete
                                    </button>
                                    <button class="inline-flex items-center px-3 py-1 border border-green-600 text-green-600 bg-white hover:bg-green-600 hover:text-white rounded text-sm transition-colors" @onclick="() => ViewAdjustedItems(item.Id)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                        Measurements
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <div class="mt-4 flex justify-between items-center">
            <div>
                <span class="text-sm text-gray-700">
                    Showing <span class="font-medium">@(_paginatedResponse?.Items.Count())</span> of <span class="font-medium">@(_paginatedResponse?.TotalCount)</span> items
                </span>
            </div>
            <div class="flex space-x-2">
                <button 
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(!_paginatedResponse?.HasPrevious ?? true ? "opacity-50 cursor-not-allowed" : "")" 
                    @onclick="PreviousPage" 
                    disabled="@(!_paginatedResponse?.HasPrevious ?? true)">
                    Previous
                </button>
                <button 
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(!_paginatedResponse?.HasNext ?? true ? "opacity-50 cursor-not-allowed" : "")" 
                    @onclick="NextPage" 
                    disabled="@(!_paginatedResponse?.HasNext ?? true)">
                    Next
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private List<ItemDto>? _items;
    private PaginatedResponseDto<ItemDto>? _paginatedResponse;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private int selectedItemTypeId = 0;
    private List<ItemTypeDto>? itemTypes;
    
    [Inject]
    private ItemService ItemService { get; set; } = default!;
    
    [Inject]
    private ItemTypeService ItemTypeService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemTypes();
        await LoadItems();
    }
    
    private async Task LoadItemTypes()
    {
        try
        {
            itemTypes = await ItemTypeService.GetItemTypesAsync();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load item types: {ex.Message}");
        }
    }

    private async Task LoadItems()
    {
        _loading = true;
        try
        {
            _paginatedResponse = await ItemService.GetItemsAsync(currentPage, pageSize, searchTerm, selectedItemTypeId);
            _items = _paginatedResponse.Items.ToList();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load items: {ex.Message}");
        }
        _loading = false;
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("/items/create");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/items/edit/{id}");
    }
    
    private void ViewAdjustedItems(int id)
    {
        NavigationManager.NavigateTo($"/items/{id}/measurements");
    }

    private async Task ConfirmDelete(ItemDto item)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{item.Name}'?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteItem(item.Id);
        }
    }

    private async Task DeleteItem(int id)
    {
        try
        {
            var success = await ItemService.DeleteItemAsync(id);
            if (success)
            {
                await DialogService.ShowMessageBox("Success", "Item deleted successfully.");
                await LoadItems();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "Failed to delete item. It may be in use by recipes or have adjusted measurements.");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error deleting item: {ex.Message}");
        }
    }
    
    private async Task HandleSearch()
    {
        currentPage = 1; // Reset to first page when searching
        await LoadItems();
    }
    
    private async Task FilterByItemType()
    {
        currentPage = 1; // Reset to first page when filtering
        await LoadItems();
    }
    
    private async Task PreviousPage()
    {
        if (_paginatedResponse?.HasPrevious ?? false)
        {
            currentPage--;
            await LoadItems();
        }
    }
    
    private async Task NextPage()
    {
        if (_paginatedResponse?.HasNext ?? false)
        {
            currentPage++;
            await LoadItems();
        }
    }
}