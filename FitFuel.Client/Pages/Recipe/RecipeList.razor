@page "/recipes"
@using FitFuel.Shared.Dtos
@using FitFuel.Client.Services
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Recipes</PageTitle>

<div class="container mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Recipes</h1>
    
    <div class="mb-6 flex justify-between items-center">
        <div>
            <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded flex items-center" @onclick="CreateNew">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add New Recipe
            </button>
        </div>
        <div class="flex items-center">
            <div>
                <input type="text" placeholder="Search recipes..." class="px-4 py-2 border rounded-md" 
                       @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            </div>
        </div>
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (_recipes == null || !_recipes.Any())
    {
        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded" role="alert">
            <p>No recipes found. Click the button above to add one.</p>
        </div>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipe Name</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Servings</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Calories</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Fat (g)</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Protein (g)</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Carbs (g)</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Fiber (g)</th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Sugars (g)</th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var recipe in _recipes)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@recipe.Name</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@recipe.Servings</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@recipe.TotalCalories</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@Math.Round(recipe.TotalFat, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@Math.Round(recipe.TotalProtein, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@Math.Round(recipe.TotalCarbohydrates, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@Math.Round(recipe.TotalFiber, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">@Math.Round(recipe.TotalSugars, 2)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-center">
                                <div class="flex justify-center space-x-2">
                                    <button class="inline-flex items-center px-3 py-1 border border-blue-600 text-blue-600 bg-white hover:bg-blue-600 hover:text-white rounded text-sm transition-colors" @onclick="() => Edit(recipe.Id)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Edit
                                    </button>
                                    <button class="inline-flex items-center px-3 py-1 border border-red-600 text-red-600 bg-white hover:bg-red-600 hover:text-white rounded text-sm transition-colors" @onclick="() => ConfirmDelete(recipe)">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <div class="mt-4 flex justify-between items-center">
            <div>
                <span class="text-sm text-gray-700">
                    Showing <span class="font-medium">@(_paginatedResponse?.Items.Count())</span> of <span class="font-medium">@(_paginatedResponse?.TotalCount)</span> recipes
                </span>
            </div>
            <div class="flex space-x-2">
                <button 
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(!_paginatedResponse?.HasPrevious ?? true ? "opacity-50 cursor-not-allowed" : "")" 
                    @onclick="PreviousPage" 
                    disabled="@(!_paginatedResponse?.HasPrevious ?? true)">
                    Previous
                </button>
                <button 
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 @(!_paginatedResponse?.HasNext ?? true ? "opacity-50 cursor-not-allowed" : "")" 
                    @onclick="NextPage" 
                    disabled="@(!_paginatedResponse?.HasNext ?? true)">
                    Next
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private List<RecipeDto>? _recipes;
    private PaginatedResponseDto<RecipeDto>? _paginatedResponse;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    
    [Inject]
    private RecipeService RecipeService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        _loading = true;
        try
        {
            _paginatedResponse = await RecipeService.GetRecipesAsync(
                currentPage, 
                pageSize,
                searchTerm);
                
            _recipes = _paginatedResponse.Items.ToList();
            
            await JSRuntime.InvokeVoidAsync("console.log", "Loaded recipes:", _recipes);
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Failed to load recipes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading recipes:", ex);
        }
        _loading = false;
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("/recipes/create");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/recipes/edit/{id}");
    }

    private async Task ConfirmDelete(RecipeDto recipe)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{recipe.Name}'? This will also delete all ingredients and measurements for this recipe.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteRecipe(recipe.Id);
        }
    }

    private async Task DeleteRecipe(int id)
    {
        try
        {
            _loading = true;
            var success = await RecipeService.DeleteRecipeAsync(id);
            if (success)
            {
                await DialogService.ShowMessageBox("Success", "Recipe deleted successfully.");
                await LoadRecipes();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "Failed to delete recipe.");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error deleting recipe: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error deleting recipe:", ex);
        }
        _loading = false;
    }
    
    private async Task HandleSearch()
    {
        currentPage = 1; // Reset to first page when searching
        await LoadRecipes();
    }
    
    private async Task PreviousPage()
    {
        if (_paginatedResponse?.HasPrevious ?? false)
        {
            currentPage--;
            await LoadRecipes();
        }
    }
    
    private async Task NextPage()
    {
        if (_paginatedResponse?.HasNext ?? false)
        {
            currentPage++;
            await LoadRecipes();
        }
    }
}